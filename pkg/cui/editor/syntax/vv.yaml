filetype: vv

detect:
  filename: "\\.vv$"

rules:
  # Conditionals and control flow
  - special: "\\b(break|case|continue|default|go|range)\\b"
  - statement: "\\b(if|else|for|return|import|func|export|in|var)\\b"
  - preproc: "\\b(to_json|from_json|print|printf|sprintf|format|len|copy|len|append|delete|splice|type_name|int|bool|float|char|bytes|error|string|time|is_string|is_bool|is_float|is_char|is_bytes|is_error|is_undefined|is_function|is_callable|is_array|is_immutable_array|is_map|is_iterable|is_time)\\b"
  - symbol.operator: "!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>|&^|\\+=|-=|/=|\\*=|%=|\\^=|&=|&^=|\\|=|<<=|>>=|=|:=|--|\\+\\+|<=|>=|<|>"

    # Types
  - symbol: "(,|\\.)"
  - type: "\\b(int|float|bool|char|string|bytes|error|time|array|map|undefined|function|user-defined)\\b"
  - constant.bool: "\\b(true|false|undefined)\\b"

    # Brackets
  - symbol.brackets: "(\\{|\\})"
  - symbol.brackets: "(\\(|\\))"
  - symbol.brackets: "(\\[|\\])"

    # Numbers and strings
  - constant.number: "\\b([0-9]+|0x[0-9a-fA-F]*)\\b|'.'"

  - constant.string:
      start: "\""
      end: "\""
      skip: "\\\\."
      rules:
        - constant.specialChar: "%."
        - constant.specialChar: "\\\\[abfnrtv'\\\"\\\\]"
        - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})"

  - constant.string:
      start: "'"
      end: "'"
      skip: "\\\\."
      rules:
        - error: "..+"
        - constant.specialChar: "%."
        - constant.specialChar: "\\\\[abfnrtv'\\\"\\\\]"
        - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})"

  - constant.string:
      start: "`"
      end: "`"
      rules: []

  - comment:
      start: "//"
      end: "$"
      rules:
        - todo: "(TODO|FIXME):?"

  - comment:
      start: "/\\*"
      end: "\\*/"
      rules:
        - todo: "(TODO|FIXME):?"
